// –ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const ui = {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∫–æ–Ω–æ–∫
    updateIconList: function() {
        const iconList = document.getElementById('iconList');
        iconList.innerHTML = '';
        
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–ê–®–ò SVG –ò–ö–û–ù–ö–ò
        const icons = {
            camera: svgIcons.getIcon('camera'),
            box: svgIcons.getIcon('box'), 
            optical: svgIcons.getIcon('optical'),
            pole: svgIcons.getIcon('pole'),
            pole_with_camera: svgIcons.getIcon('pole_with_camera')
        };
        
        const iconDescriptions = {
            camera: '–ö–∞–º–µ—Ä–∞',
            box: 'POE –∫–æ—Ä–æ–±–∫–∞',
            optical: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞',
            pole: '–°—Ç–æ–ª–±',
            pole_with_camera: 'POE –∫–æ—Ä–æ–±–∫–∞ —Å –∫–∞–º–µ—Ä–æ–π'
        };
        
        Object.entries(icons).forEach(([type, path]) => {
            const li = document.createElement('li');
            li.className = 'icon-item';
            li.innerHTML = `
                <img src="${path}" class="icon-preview" alt="${type}">
                <span>${iconDescriptions[type]}</span>
            `;
            iconList.appendChild(li);
        });
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats: function() {
        const statsList = document.getElementById('statsList');
        
        // –ü–æ–¥—Å—á–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        const stats = this.calculateEquipmentStats();
        
        statsList.innerHTML = `
            <div class="stats-card">
                <div class="stats-icon">üì¶</div>
                <div class="stats-content">
                    <div class="stats-value">${stats.totalPoeBoxes}</div>
                    <div class="stats-label">POE –∫–æ—Ä–æ–±–æ–∫</div>
                </div>
            </div>
            
            <div class="stats-card">
                <div class="stats-icon">üìπ</div>
                <div class="stats-content">
                    <div class="stats-value">${stats.totalCameras}</div>
                    <div class="stats-label">–ö–∞–º–µ—Ä</div>
                </div>
            </div>
            
            <div class="stats-card stats-card-wide">
                <div class="stats-icon">üî¥</div>
                <div class="stats-content">
                    <div class="stats-value">${stats.opticalLength}</div>
                    <div class="stats-label">–û–ø—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–±–µ–ª—å</div>
                </div>
            </div>
            
            <div class="stats-card stats-card-wide">
                <div class="stats-icon">‚ö´</div>
                <div class="stats-content">
                    <div class="stats-value">${stats.ethernetLength}</div>
                    <div class="stats-label">–í–∏—Ç–∞—è –ø–∞—Ä–∞</div>
                </div>
            </div>
        `;
    },

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    calculateEquipmentStats: function() {
        const allPoints = points.getAllPoints();
        const allLines = lines.getAllLines();
        
        let totalPoeBoxes = 0;
        let totalCameras = 0;
        
        // –ü–æ–¥—Å—á–µ—Ç POE –∫–æ—Ä–æ–±–æ–∫ –∏ –∫–∞–º–µ—Ä
        allPoints.forEach(point => {
            if (point.type === 'box') {
                totalPoeBoxes += 1;
            } else if (point.type === 'pole_with_camera') {
                totalPoeBoxes += 1;
                totalCameras += point.directions ? point.directions.length : 0;
            } else if (point.type === 'camera') {
                totalCameras += point.directions ? point.directions.length : 0;
            }
        });
        
        // –ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω –∫–∞–±–µ–ª–µ–π
        const ethernetLines = allLines.filter(line => line.type === 'ethernet_line');
        const opticalLines = allLines.filter(line => line.type === 'optical_line');
        
        const totalEthernetLength = ethernetLines.reduce((sum, line) => sum + line.distance, 0);
        const totalOpticalLength = opticalLines.reduce((sum, line) => sum + line.distance, 0);
        
        return {
            totalPoeBoxes: totalPoeBoxes,
            totalCameras: totalCameras,
            ethernetLength: totalEthernetLength.toFixed(1) + ' –º',
            opticalLength: totalOpticalLength.toFixed(1) + ' –º'
        };
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    updateStatus: function(message) {
        document.getElementById('status').textContent = message;
    }
};